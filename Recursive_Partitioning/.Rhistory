source('~/MRC_BSU_Internship/Recursive_Partitioning/ValidateTree.R', echo=TRUE)
source('~/MRC_BSU_Internship/Recursive_Partitioning/ValidateTree.R', echo=TRUE)
args <- list(1000,'5e-5')
debugSource('~/MRC_BSU_Internship/Recursive_Partitioning/GeneratePermutatedGenoMatrix.R', echo=TRUE)
args <- list(1000,'4e-5')
debugSource('~/MRC_BSU_Internship/Recursive_Partitioning/GeneratePermutatedGenoMatrix.R', echo=TRUE)
object.size(args)
?object.size
object.size(args,units = 'GB')
object.size(x=args,units = 'GB')
object.size(x=args,units = 'MB')
print(args,units = 'GB')
print(args,units = 'GB')[[2]]
print(args,units = 'GB')[2]
print(args,units = 'GB')[2]
format(args,units = 'GB')[2]
?mclapply
library(parallel)
?mclapply
?gc()
?pbmclapply
?pbmclapply
tree_chunks <- 1:500
length(tree_chunks) %*% 50
length(tree_chunks) %% 50
length(tree_chunks) / 50
quantile(tree_chunks)
round(quantile(tree_chunks))
round(quantile(tree_chunks),100)
round(quantile(tree_chunks))
floor(quantile(tree_chunks))
tree_chunks <- 501:1000
quantiles <- floor(quantile(tree_chunks))
for(i in 1:(length(quantiles) - 1)){
currentTreeChunk <- tree_chunks[tree_chunks < quantiles[i+1] & tree_chunks >= quantiles[i]]
if(i == (length(quantiles) - 1)){
currentTreeChunk <- c(currentTreeChunk,tree_chunks[length(tree_chunks)])
}
print(currentTreeChunk)
}
for(i in 1:(length(quantiles) - 1)){
currentTreeChunk <- tree_chunks[tree_chunks < quantiles[i+1] & tree_chunks >= quantiles[i]]
if(i == (length(quantiles) - 1)){
currentTreeChunk <- c(currentTreeChunk,tree_chunks[length(tree_chunks)])
}
print(range(currentTreeChunk))
}
chunk1 <- readRDS('~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/0.75_10000_3e-5/prediction_betas_perm/mean_beta_1_1000.rds')
chunk2 <- readRDS('~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/0.75_10000_3e-5/prediction_betas_perm/mean_beta_1001_2000.rds')
chunk3 <- readRDS('~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/0.75_10000_3e-5/prediction_betas_perm/mean_beta_2001_3000.rds')
chunk4 <- readRDS('~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/0.75_10000_3e-5/prediction_betas_perm/mean_beta_3001_4000.rds')
chunk5 <- readRDS('~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/0.75_10000_3e-5/prediction_betas_perm/mean_beta_4001_5000.rds')
all_chunks <- chunk1 + chunk2 + chunk3 + chunk4 + chunk5
hist(apply(all_chunks,1,sd))
hist(apply(all_chunks/5000,1,sd))
source('~/MRC_BSU_Internship/Plots/BetaPrediction.R', echo=TRUE)
sd(nonPermResult)
dim(nonPermResult)
length(nonPermResult)
nonPermResult[1]
nonPermResult[2]
nonPermResult[3]
nonPermResult[4]
sd(nonPermResult/5000)
sd(nonPermResult)
sd(nonPermResult/5000)
sum(apply(all_chunks/5000,1,sd) > sd(nonPermResult/5000))
splitIndices(1000,10)
library(parallel)
splitIndices(1000,10)
?splitIndices
# args=(commandArgs(TRUE))
# node_size <- as.numeric(args[[1]])
# thresh <- args[[2]]
# n_cores <- as.numeric(args[[3]])
# tree_chunks <- args[[4]]
node_size <- 30000
thresh <- '3e-5'
n_cores <- 16
tree_chunks <- '1:5000'
print(c('node_size'=node_size,'thresh'=thresh,'n_cores'=n_cores,'tree_chunks'=tree_chunks))
resultPath <- '~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/'
suffix <- paste0('0.75_',node_size,'_',thresh,'/')
p_thresh <- as.numeric(thresh)
debugSource('~/MRC_BSU_Internship/Recursive_Partitioning/PermutedPrediction.R', echo=TRUE)
#Load training set samples
data <- readRDS(paste0(resultPath,'data_p_',p_thresh,'.rds'))
training_testing_set <- ExtractSubSample(data,readRDS('~/bsu_scratch/UKB_Data/training_set.rds'),readRDS('~/bsu_scratch/UKB_Data/test_set.rds'))
testing_set <- training_testing_set$outofbag
#Load permuted genotype matrix
permGenotypeMatrix <- readRDS(paste0(resultPath,'perm_genotype_p_',p_thresh,'.rds'))
debugSource('~/MRC_BSU_Internship/Recursive_Partitioning/PermutedPrediction.R', echo=TRUE)
PermutedPrediction(testing_set,paste0(resultPath,suffix),n_cores,tree_chunks,permGenotypeMatrix)
permResults[[1]]$testingMainEffects
permResults[[1]]$testingMainEffects
permResults[[2]]$testingMainEffects
permResults[[3]]$testingMainEffects
debugSource('~/MRC_BSU_Internship/Recursive_Partitioning/PermutedPrediction.R', echo=TRUE)
PermutedPrediction(testing_set,paste0(resultPath,suffix),n_cores,tree_chunks,permGenotypeMatrix)
testingMainEffects <- do.call(rbind,testingMainEffects)
rownames(testingMainEffects)
testingMainEffects <- lapply(permResults,function(x) x$testingMainEffects)
sapply(testingMainEffects,function(x) names(x))
lapply(testingMainEffects,function(x) names(x))
testingMainEffects <- lapply(permResults,function(x) x$testingMainEffects)
saveRDS(testingMainEffects,file=paste0(randomForestPath,'/prediction_betas_perm/','tree',i,'.rds'))
node_size <- 30000
thresh <- '3e-5'
thresh <- '6e-5'
n_cores <- 16
tree_chunks <- '1:5000'
# node_size <- 30000
# thresh <- '3e-5'
# n_cores <- 16
# tree_chunks <- '1:5000'
print(c('node_size'=node_size,'thresh'=thresh,'n_cores'=n_cores,'tree_chunks'=tree_chunks))
resultPath <- '~/bsu_scratch/Random_Forest/rs3821843_rs7340705_rs113210396_rs312487_rs11719824_rs3774530_rs3821856_sbp/'
suffix <- paste0('0.75_',node_size,'_',thresh,'/')
p_thresh <- as.numeric(thresh)
#Load training set samples
data <- readRDS(paste0(resultPath,'data_p_',p_thresh,'.rds'))
training_testing_set <- ExtractSubSample(data,readRDS('~/bsu_scratch/UKB_Data/training_set.rds'),readRDS('~/bsu_scratch/UKB_Data/test_set.rds'))
source('~/MRC_BSU_Internship/Recursive_Partitioning/ExtractSubsample.R')
source('~/MRC_BSU_Internship/Recursive_Partitioning/InteractionTree.R')
library(partykit)
library(parallel)
library(pbmcapply)
#Generate training and testing set prediction, given a genotype matrix
GenerateTestingPrediction <- function(tree,genotypeMatrix,testingSetSamples){
nodeAssignment <- predict(tree,genotypeMatrix)
nodeAssignment <- as.vector(nodeAssignment)
uniqueLeafNodes <- sort(unique(nodeAssignment),decreasing = F)
#Calculate treatment effect estimates based on testing set
testingMainEffects <- rep(NA,length(uniqueLeafNodes))
names(testingMainEffects) <- uniqueLeafNodes
for(i in 1:length(uniqueLeafNodes)){
currentIndicator <- nodeAssignment == uniqueLeafNodes[i]
testingMainEffects[i] <- FitMainEffectModel(testingSetSamples$dosageTarget[currentIndicator],testingSetSamples$phenotypes[currentIndicator],testingSetSamples$covariates[currentIndicator,])$coeff['treatment']
}
mainEffectPred <- testingMainEffects[as.character(nodeAssignment)]
names(mainEffectPred) <- NULL
return(list(mainEffectPred=mainEffectPred,testingMainEffects=testingMainEffects))
}
PermutedPrediction <- function(testingSetSamples,randomForestPath,n_cores,tree_chunks,permGenotypeMatrix){
system(paste0('mkdir -p ',randomForestPath,'/prediction_betas_perm/'))
#find all individual trees in random forest
treePaths <- dir(randomForestPath)
treePaths <- treePaths[sapply(treePaths,function(x) grepl('tree',x))]
treePaths <- paste0(randomForestPath,treePaths)
#For each tree, predict using the permuted matrix
tree_chunks <- unlist(strsplit(tree_chunks,':'))
tree_chunks <- tree_chunks[1]:tree_chunks[2]
#Initialize summation matrix
sumBeta <- lapply(1:length(permGenotypeMatrix),function(x) rep(0,nrow(testingSetSamples$dosageMatrix)))
#Loop through all trees
pb <- progressBar()
for(i in 1:(length(tree_chunks))){
setTxtProgressBar(pb,i/length(tree_chunks))
#Load trees
treeObj <- readRDS(treePaths[tree_chunks[i]])
#Predict treatment effects across bootstrap samples
permResults <- list()
chunks <- splitIndices(length(permGenotypeMatrix),10)
for(j in 1:length(chunks)){
permResults <- c(permResults,mclapply(chunks[[j]],function(i){
GenerateTestingPrediction(treeObj$bootstrapPartyTree,permGenotypeMatrix[[i]],testingSetSamples)
},mc.cores =  n_cores))
}
sumBeta <- mapply("+",sumBeta,lapply(permResults,function(x) x$mainEffectPred),SIMPLIFY = F)
testingMainEffects <- lapply(permResults,function(x) x$testingMainEffects)
saveRDS(testingMainEffects,file=paste0(randomForestPath,'/prediction_betas_perm/','testing_main_effects_tree',tree_chunks[i],'.rds'))
remove(permResults);gc(verbose = F);
}
close(pb)
sumBeta <- do.call(rbind,sumBeta)
saveRDS(sumBeta,file = paste0(randomForestPath,'/prediction_betas_perm/','sum_beta_',range(tree_chunks)[1],'_',range(tree_chunks)[2],'.rds'))
}
RunPermutedPrediction <- function(resultPath,suffix,p_thresh,n_cores,tree_chunks){
#Load training set samples
data <- readRDS(paste0(resultPath,'data_p_',p_thresh,'.rds'))
training_testing_set <- ExtractSubSample(data,readRDS('~/bsu_scratch/UKB_Data/training_set.rds'),readRDS('~/bsu_scratch/UKB_Data/test_set.rds'))
remove(data);gc(verbose = F);
testing_set <- training_testing_set$outofbag
remove(training_testing_set);gc(verbose = F);
#Load permuted genotype matrix
permGenotypeMatrix <- readRDS(paste0(resultPath,'perm_genotype_p_',p_thresh,'.rds'))
PermutedPrediction(testing_set,paste0(resultPath,suffix),n_cores,tree_chunks,permGenotypeMatrix)
}
training_testing_set <- ExtractSubSample(data,readRDS('~/bsu_scratch/UKB_Data/training_set.rds'),readRDS('~/bsu_scratch/UKB_Data/test_set.rds'))
testing_set <- training_testing_set$outofbag
#Load permuted genotype matrix
permGenotypeMatrix <- readRDS(paste0(resultPath,'perm_genotype_p_',p_thresh,'.rds'))
source('~/MRC_BSU_Internship/Recursive_Partitioning/PredictFromRandomForest.R', echo=TRUE)
source('~/MRC_BSU_Internship/Recursive_Partitioning/PredictFromRandomForest.R', echo=TRUE)
debugSource('~/MRC_BSU_Internship/Recursive_Partitioning/PredictFromRandomForest.R', echo=TRUE)
tree
source('~/MRC_BSU_Internship/Recursive_Partitioning/RandomForest.R', echo=TRUE)
